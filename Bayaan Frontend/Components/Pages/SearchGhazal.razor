@page "/admin/search-ghazals"
@using Microsoft.AspNetCore.Authorization
@using Newtonsoft.Json
@using Repo.IServices
@attribute [Authorize(Roles = "Admin")]
@inject IGhazalService GhazalService
@rendermode InteractiveServer

<h2 class="text-4xl font-semibold mb-6 custom-heading">Search Ghazals by Email</h2>
<hr class="mb-6 custom-divider" />

<div class="ghazals-search-page">
    <div class="ghazals-container">
<div class="bg-gray-100 p-6 rounded-lg shadow-md transform hover:translate-y-[-5px] transition ease-in-out border border-gray-300">
    <input @bind="searchEmail"
           @bind:event="oninput"
           class="input mr-2 p-2 border rounded-md shadow-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition ease-in-out"
           placeholder="Enter user's email…" />

    <button class="bg-blue-500 hover:bg-blue-600 text-gray-50 font-semibold px-4 py-2 rounded-md shadow-md mr-2 transform hover:translate-y-[-2px] transition ease-in-out focus:outline-none focus:ring-2 focus:ring-blue-500"
            @onclick="SearchGhazals">
        Search Ghazals
    </button>
</div>
    </div>

@if (isSearching)
{
    <p class="text-gray-500 mt-4">Searching...</p>
}
else if (ghazals == null)
{
    <p class="text-gray-500 mt-4">Enter an email to search for ghazals.</p>
}
else if (ghazals.Count == 0)
{
    <p class="text-gray-500 mt-4">No ghazals found for this email.</p>
}
else
{
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert alert-info text-center my-3">@statusMessage</div>
        }
    <div class="ghazals-container">
    <ul class="bg-gray-50 p-6 rounded-lg shadow-md mt-4 space-y-4">
        @foreach (var ghazal in ghazals)
        {
            <li class="p-4 rounded-md border border-gray-300 shadow-md hover:bg-gray-100 transform hover:translate-y-[-2px] transition ease-in-out">
                <h5 class="text-2xl font-semibold mb-2 custom-ghazal-title">@ghazal.Title</h5>
                <p class="text-gray-500"><strong>Created At:</strong> @ghazal.CreatedAt</p>
                <p class="text-gray-500"><strong>PoetId:</strong> @ghazal.PoetId</p>

                <div class="bg-white-900 p-4 rounded-md mt-4">
                    <strong>Ghazal Text (JSON):</strong>
                    <pre class="bg-gray-900 p-2 rounded-md overflow-auto mt-2 text-green-400">
                        @JsonConvert.SerializeObject(JsonConvert.DeserializeObject(ghazal.GhazalJson), Formatting.Indented)
                            </pre>
                </div>
                        <button class="delete-button btn btn-danger mt-4"
                                @onclick="@(() => DeleteGhazalAsync(ghazal.GhazalId))">
                            <i class="fas fa-trash-alt me-1"></i> Delete
                        </button>
            </li>
        }
    </ul>
            
        </div>
        }
        </div>
@code {
    private string searchEmail = string.Empty;
    private bool isSearching = false;
    private string statusMessage = string.Empty;
    private List<GhazalModel> ghazals;

    private async Task SearchGhazals()
    {
        isSearching = true;

        ghazals = await GhazalService.GetGhazalsByEmailAsync(searchEmail);

        isSearching = false;
    }

    private async Task DeleteGhazalAsync(string ghazalId)
    {
        var success = await GhazalService.DeleteGhazal(ghazalId);
        if (success)
        {
            ghazals = ghazals.Where(g => g.GhazalId != ghazalId).ToList();
            statusMessage = "Ghazal deleted successfully!";
        }
        else
        {
            statusMessage = "Ghazal Deleted Successfully.";
        }

        StateHasChanged();
        await Task.Delay(1500); 
        statusMessage = string.Empty; // Clear message
    }
}
