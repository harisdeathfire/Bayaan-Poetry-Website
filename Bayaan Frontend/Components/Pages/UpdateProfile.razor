@page "/updateProfile"
@using System.Text
@using System.Security.Claims
@inject IUserService UserService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@layout UserLayout

<script src="https://cdn.tailwindcss.com"></script>

<h1 class="text-4xl font-semibold text-gray-900 mt-10 mb-6 text-center">
    Provide Additional Information
</h1>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="bg-red-100 border border-red-500 text-red-700 px-4 py-2 rounded-md mb-4 max-w-md mx-auto">
        @errorMessage
    </div>
}

<div class="min-h-screen bg-cover bg-center flex items-center justify-center py-20 px-4">
    <div class="bg-gray-50 bg-opacity-90 backdrop-blur-md shadow-xl rounded-xl p-10 w-full max-w-md border border-gray-300 transform transition duration-500 hover:shadow-2xl hover:bg-gray-100 hover:translate-y-1">
        <h2 class="text-2xl font-semibold text-center text-gray-900 mb-6">
            Update Your Bayaan™ Profile (Additional)
        </h2>

        <EditForm Model="@profile" OnValidSubmit="@SaveProfile">
            <DataAnnotationsValidator />

            <ValidationSummary />

            <div class="space-y-4">
                <input type="text" @bind="profile.FirstName" placeholder="First Name"
                       class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" />

                <input type="text" @bind="profile.LastName" placeholder="Last Name"
                       class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" />

                <input type="text" @bind="profile.NickName" placeholder="Nick Name"
                       class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" />

                <input type="date" @bind="profile.DOB"
                       class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" />

                <input type="text" @bind="profile.PhoneNo" placeholder="Phone Number"
                       class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" />

                <input type="text" @bind="profile.City" placeholder="City"
                       class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" />

                <input type="text" @bind="profile.Country" placeholder="Country"
                       class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" />

                <input type="text" @bind="profile.UserLocation" placeholder="User Location"
                       class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500" />

                <textarea @bind="profile.ShortDescription" rows="4"
                          placeholder="Write a short description about yourself…"
                          class="w-full px-4 py-2 border rounded-md focus:outline-none focus:ring-2 focus:ring-green-500">
                </textarea>

                <input type="email" @bind="profile.Email" disabled
                       class="w-full px-4 py-2 border rounded-md bg-gray-100 text-gray-500 disabled:cursor-not-allowed" />

                <button disabled="@isSubmitting"
                        class="w-full py-2 px-4 rounded-md font-semibold text-gray-50 bg-green-600 hover:bg-green-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition duration-500 transform hover:translate-y-1">
                    Save Additional Information
                </button>

            </div>

        </EditForm>

    </div>
</div>

@code {
    private UserModel profile = new UserModel();

    private bool isSubmitting = false;
    private string errorMessage = string.Empty;

    private ClaimsPrincipal? claimsUser;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            claimsUser = authState.User;

            var email = claimsUser.FindFirst(ClaimTypes.Email)?.Value;

            if (string.IsNullOrEmpty(email))
            {
                NavManager.NavigateTo("/logingoogle");

                return;
            }

            var currentUser = await UserService.GetProfileByEmail(email);
            if (currentUser == null)
            {
                NavManager.NavigateTo("/logingoogle");

                return;
            }

            profile = currentUser;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load profile: {ex.Message}";
        }
    }

    private async Task SaveProfile()
    {
        isSubmitting = true;

        try
        {
            await UserService.Update(profile);
            NavManager.NavigateTo("/userProfilePage");

        }
        catch (Exception ex)
        {
            errorMessage = $"Profile update failed: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
